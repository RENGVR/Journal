@page "/register"
@layout LoginLayout

@using Journal.Services;
@using Microsoft.AspNetCore.Components.Forms;
@using Data;
@using System.ComponentModel.DataAnnotations;

@inject UserManager UserManager
@inject NavigationManager NavigationManager

<div class="container flex-column mt-5">
    <h3 class="mt-3 mb-0">Registration</h3>

    <EditForm Model="@Model" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />

        <div class="form-group mb-3">
            <label for="username">Benutzername:</label>
            <InputText id="username" class="form-control" @bind-Value="Model.Username" />
            <ValidationMessage For="@(() => Model.Username)" />
        </div>

        <div class="form-group mb-3">
            <label for="firstName">Vorname:</label>
            <InputText id="firstName" class="form-control" @bind-Value="Model.FirstName" />
            <ValidationMessage For="@(() => Model.FirstName)" />
        </div>

        <div class="form-group mb-3">
            <label for="lastName">Nachname:</label>
            <InputText id="lastName" class="form-control" @bind-Value="Model.LastName" />
            <ValidationMessage For="@(() => Model.LastName)" />
        </div>

        <div class="form-group mb-3">
            <label for="birthday">Geburtsdatum:</label>
            <InputDate class="form-control" Type="InputDateType.Date" @bind-Value="Model.Birthday"/>
            <ValidationMessage For="@(() => Model.Birthday)" />
        </div>

        <div class="form-group mb-3">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" type="email" @bind-Value="Model.Email" />
            <ValidationMessage For="@(() => Model.Email)" />
        </div>

        <div class="form-group mb-3">
            <label for="password">Passwort:</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>

        <div class="form-group mb-3">
            <label for="confirmPassword">Passwort bestätigen:</label>
            <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="Model.ConfirmPassword" />
            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Registrieren</button>
            <button class="btn btn-secondary" @onclick="NavigateToLogin">Zurück</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
</div>

@code {
    private RegisterModel Model = new RegisterModel();

    public User? User { get; set; }

    private string ErrorMessage = default!;

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private DisplayComponent CurrentComponent = DisplayComponent.Registration;

    private enum DisplayComponent
    {
        Registration,
        Login
    }

    private async Task OnSubmit()
    {
        if (Model.Password != Model.ConfirmPassword)
        {
            ErrorMessage = "Die beiden Passwörter stimmen nicht überein.";
            return;
        }

        var user = new User(Model.Username, Model.FirstName, Model.LastName, Model.Email, Model.Password, Model.Birthday);

        try
        {
            await UserManager.CreateUserAsync(user);

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    // Eine Klasse, die das Registrierungsformularmodell darstellt
    public class RegisterModel
    {
        [Required(ErrorMessage = "Benutzername ist erforderlich.")]
        public string Username { get; set; } = default!;

        [Required(ErrorMessage = "Vorname ist erforderlich.")]
        public string FirstName { get; set; } = default!;

        [Required(ErrorMessage = "Nachname ist erforderlich.")]
        public string LastName { get; set; } = default!;

        [Required(ErrorMessage = "Ein Geburtsdatum ist erforderlich.")]
        public DateOnly Birthday { get; set; }

        [Required(ErrorMessage = "E-Mail ist erforderlich.")]
        [EmailAddress(ErrorMessage = "Ungültige E-Mail-Adresse.")]
        public string Email { get; set; } = default!;

        [Required(ErrorMessage = "Passwort ist erforderlich.")]
        [MinLength(6, ErrorMessage = "Das Passwort muss mindestens 6 Zeichen lang sein.")]
        public string Password { get; set; } = default!;

        [Required(ErrorMessage = "Passwortbestätigung ist erforderlich.")]
        public string ConfirmPassword { get; set; } = default!;
    }
}
